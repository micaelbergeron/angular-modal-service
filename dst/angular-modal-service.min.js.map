{"version":3,"sources":["angular-modal-service.js"],"names":["module","angular","factory","$animate","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","$timeout","ModalService","self","this","getTemplate","template","templateUrl","deferred","defer","resolve","then","error","reject","promise","appendChild","parent","child","children","length","enter","showModal","options","controllerName","controller","modalScope","scope","$new","closeDeferred","closedDeferred","inputs","$scope","close","result","delay","undefined","leave","modalElement","$destroy","modal","extend","controllerObjBefore","controllerAs","modalController","linkFn","$element","appendElement","body","element","closed"],"mappings":";CAMC,WAEC,YAEA,IAAIA,GAASC,QAAQD,OAAO,yBAE5BA,GAAOE,QAAQ,gBAAiB,WAAY,YAAa,WAAY,cAAe,QAAS,aAAc,KAAM,mBAAoB,WACnI,SAASC,EAAUC,EAAWC,EAAUC,EAAaC,EAAOC,EAAYC,EAAIC,EAAkBC,GAK9F,QAASC,KAEP,GAAIC,GAAOC,KAKPC,EAAc,SAASC,EAAUC,GACnC,GAAIC,GAAWT,EAAGU,OAalB,OAZIH,GACFE,EAASE,QAAQJ,GACRC,EACTP,EAAiBO,GAAa,GAC3BI,KAAK,SAASL,GACbE,EAASE,QAAQJ,IAChB,SAASM,GACVJ,EAASK,OAAOD,KAGpBJ,EAASK,OAAO,kDAEXL,EAASM,SAMdC,EAAc,SAASC,EAAQC,GACjC,GAAIC,GAAWF,EAAOE,UACtB,OAAIA,GAASC,OAAS,EACb1B,EAAS2B,MAAMH,EAAOD,EAAQE,EAASA,EAASC,OAAS,IAE3D1B,EAAS2B,MAAMH,EAAOD,GAG/Bb,GAAKkB,UAAY,SAASC,GAGxB,GAAId,GAAWT,EAAGU,QAGdc,EAAiBD,EAAQE,UAC7B,OAAKD,IAMLlB,EAAYiB,EAAQhB,SAAUgB,EAAQf,aACnCI,KAAK,SAASL,GAGb,GAAImB,IAAcH,EAAQI,OAAS5B,GAAY6B,OAQ3CC,EAAgB7B,EAAGU,QACnBoB,EAAiB9B,EAAGU,QACpBqB,GACFC,OAAQN,EACRO,MAAO,SAASC,EAAQC,GACRC,SAAVD,GAAiC,OAAVA,IAAgBA,EAAQ,GACnDjC,EAAS,WAEP2B,EAAclB,QAAQuB,GAGtBxC,EAAS2C,MAAMC,GACZ1B,KAAK,WAEJkB,EAAenB,QAAQuB,GAGvBR,EAAWa,WAKXR,EAAOE,MAAQ,KACfxB,EAAW,KACXoB,EAAgB,KAChBW,EAAQ,KACRT,EAAS,KACTO,EAAe,KACfZ,EAAa,QAEhBS,IAKHZ,GAAQQ,QAAQvC,QAAQiD,OAAOV,EAAQR,EAAQQ,OAGnD,IAAIW,GAAsBhB,EAAWH,EAAQoB,cACzCC,EAAkB/C,EAAY0B,EAAQE,WAAYM,GAAQ,EAAOR,EAAQoB,cAIzEE,EAASjD,EAASW,GAClB+B,EAAeO,EAAOnB,EAC1BA,GAAWoB,SAAWR,EAElBf,EAAQoB,cAAgBD,GAC1BlD,QAAQiD,OAAOG,EAAiBF,GAI9BnB,EAAQwB,cAEV/B,EAAYO,EAAQwB,cAAeT,GAGnCtB,EAAYgC,EAAMV,EAIpB,IAAIE,IACFf,WAAYmB,EACZjB,MAAOD,EACPuB,QAASX,EACTL,MAAOJ,EAAcd,QACrBmC,OAAQpB,EAAef,QAIzBN,GAASE,QAAQ6B,KAElB5B,KAAK,KAAM,SAASC,GACnBJ,EAASK,OAAOD,KAGbJ,EAASM,UA7FdN,EAASK,OAAO,qCACTL,EAASM,UA9CtB,GAAIiC,GAAOxD,QAAQyD,QAAQtD,EAAU,GAAGqD,KA+IxC,OAAO,IAAI7C","file":"angular-modal-service.min.js","sourcesContent":["//  angularModalService.js\r\n//\r\n//  Service for showing modal dialogs.\r\n\r\n/***** JSLint Config *****/\r\n/*global angular  */\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  var module = angular.module('angularModalService', []);\r\n\r\n  module.factory('ModalService', ['$animate', '$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateRequest', '$timeout',\r\n    function($animate, $document, $compile, $controller, $http, $rootScope, $q, $templateRequest, $timeout) {\r\n\r\n    //  Get the body of the document, we'll add the modal to this.\r\n    var body = angular.element($document[0].body);\r\n\r\n    function ModalService() {\r\n\r\n      var self = this;\r\n\r\n      //  Returns a promise which gets the template, either\r\n      //  from the template parameter or via a request to the\r\n      //  template url parameter.\r\n      var getTemplate = function(template, templateUrl) {\r\n        var deferred = $q.defer();\r\n        if (template) {\r\n          deferred.resolve(template);\r\n        } else if (templateUrl) {\r\n          $templateRequest(templateUrl, true)\r\n            .then(function(template) {\r\n              deferred.resolve(template);\r\n            }, function(error) {\r\n              deferred.reject(error);\r\n            });\r\n        } else {\r\n          deferred.reject(\"No template or templateUrl has been specified.\");\r\n        }\r\n        return deferred.promise;\r\n      };\r\n\r\n      //  Adds an element to the DOM as the last child of its container\r\n      //  like append, but uses $animate to handle animations. Returns a\r\n      //  promise that is resolved once all animation is complete.\r\n      var appendChild = function(parent, child) {\r\n        var children = parent.children();\r\n        if (children.length > 0) {\r\n          return $animate.enter(child, parent, children[children.length - 1]);\r\n        }\r\n        return $animate.enter(child, parent);\r\n      };\r\n\r\n      self.showModal = function(options) {\r\n\r\n        //  Create a deferred we'll resolve when the modal is ready.\r\n        var deferred = $q.defer();\r\n\r\n        //  Validate the input parameters.\r\n        var controllerName = options.controller;\r\n        if (!controllerName) {\r\n          deferred.reject(\"No controller has been specified.\");\r\n          return deferred.promise;\r\n        }\r\n\r\n        //  Get the actual html of the template.\r\n        getTemplate(options.template, options.templateUrl)\r\n          .then(function(template) {\r\n\r\n            //  Create a new scope for the modal.\r\n            var modalScope = (options.scope || $rootScope).$new();\r\n\r\n            //  Create the inputs object to the controller - this will include\r\n            //  the scope, as well as all inputs provided.\r\n            //  We will also create a deferred that is resolved with a provided\r\n            //  close function. The controller can then call 'close(result)'.\r\n            //  The controller can also provide a delay for closing - this is\r\n            //  helpful if there are closing animations which must finish first.\r\n            var closeDeferred = $q.defer();\r\n            var closedDeferred = $q.defer();\r\n            var inputs = {\r\n              $scope: modalScope,\r\n              close: function(result, delay) {\r\n                if (delay === undefined || delay === null) delay = 0;\r\n                $timeout(function() {\r\n                  //  Resolve the 'close' promise.\r\n                  closeDeferred.resolve(result);\r\n\r\n                  //  Let angular remove the element and wait for animations to finish.\r\n                  $animate.leave(modalElement)\r\n                    .then(function () {\r\n                      //  Resolve the 'closed' promise.\r\n                      closedDeferred.resolve(result);\r\n\r\n                      //  We can now clean up the scope\r\n                      modalScope.$destroy();\r\n\r\n                      //  Unless we null out all of these objects we seem to suffer\r\n                      //  from memory leaks, if anyone can explain why then I'd\r\n                      //  be very interested to know.\r\n                      inputs.close = null;\r\n                      deferred = null;\r\n                      closeDeferred = null;\r\n                      modal = null;\r\n                      inputs = null;\r\n                      modalElement = null;\r\n                      modalScope = null;\r\n                    });\r\n                }, delay);\r\n              }\r\n            };\r\n\r\n            //  If we have provided any inputs, pass them to the controller.\r\n            if (options.inputs) angular.extend(inputs, options.inputs);\r\n\r\n            //  Create the controller, explicitly specifying the scope to use.\r\n            var controllerObjBefore = modalScope[options.controllerAs];\r\n            var modalController = $controller(options.controller, inputs, false, options.controllerAs);\r\n\r\n            //  Compile then link the template element, building the actual element.\r\n            //  Set the $element on the inputs so that it can be injected if required.\r\n            var linkFn = $compile(template);\r\n            var modalElement = linkFn(modalScope);\r\n            modalScope.$element = modalElement;\r\n\r\n            if (options.controllerAs && controllerObjBefore) {\r\n              angular.extend(modalController, controllerObjBefore);\r\n            }\r\n\r\n            //  Finally, append the modal to the dom.\r\n            if (options.appendElement) {\r\n              // append to custom append element\r\n              appendChild(options.appendElement, modalElement);\r\n            } else {\r\n              // append to body when no custom append element is specified\r\n              appendChild(body, modalElement);\r\n            }\r\n\r\n            //  We now have a modal object...\r\n            var modal = {\r\n              controller: modalController,\r\n              scope: modalScope,\r\n              element: modalElement, // backward compatibility\r\n              close: closeDeferred.promise,\r\n              closed: closedDeferred.promise\r\n            };\r\n\r\n            //  ...which is passed to the caller via the promise.\r\n            deferred.resolve(modal);\r\n          })\r\n          .then(null, function(error) { // 'catch' doesn't work in IE8.\r\n            deferred.reject(error);\r\n          });\r\n\r\n        return deferred.promise;\r\n      };\r\n\r\n    }\r\n\r\n    return new ModalService();\r\n  }]);\r\n\r\n}());\r\n"],"sourceRoot":"/source/"}